! NOTE: This code has been generated by genarray.py

subroutine farr_real_dp1(varname, farray, ncid)

 implicit none

!Arguments ------------------------------------
 integer,intent(in) :: ncid
 character(len=*),intent(in) :: varname
 real(dp),intent(in) :: farray(:)


!Local variables-------------------------------
!scalars
#ifdef HAVE_TRIO_ETSF_IO
 integer :: dimval,vartype,ii
 logical :: lstat
 character(len=500) :: dimname
 type(ETSF_io_low_error) :: Error_data

! *********************************************************************

! Define dimensions
! Use *private* names for dimensions to avoid possible name collisions.
! if varname is "foo", we use "__foo_dim1__", __foo_dim2__" for name of the dimensions
 call etsf_io_low_set_define_mode(ncid, lstat, Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

 do ii=1,size(shape(farray))
   dimval = size(farray, dim=ii) * 1
   write(dimname,"(3a,i0,a)")"__",trim(varname),"_dim",ii,"__"

   call etsf_io_low_write_dim(ncid,dimname,dimval,lstat,Error_data=Error_data)  
   ETSF_CHECK_ERROR(lstat,Error_data)
 end do

! Define the variable.
 vartype = etsf_io_low_double
 call etsf_io_low_def_var(ncid,varname,vartype,lstat,Error_data=Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

! Write data
 call etsf_io_low_set_write_mode(ncid,lstat,Error_data=Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

 call etsf_io_low_write_var(ncid,varname,farray,lstat,Error_data=Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

#else 
 MSG_ERROR("ETSF-IO support is not activated. ")
#endif

end subroutine farr_real_dp1

!--------------------------------------------------------------------------------

subroutine farr_complex_dpc1(varname, farray, ncid)

 implicit none

!Arguments ------------------------------------
 integer,intent(in) :: ncid
 character(len=*),intent(in) :: varname
 complex(dpc),intent(in) :: farray(:)


!Local variables-------------------------------
!scalars
#ifdef HAVE_TRIO_ETSF_IO
 integer :: dimval,vartype,ii
 logical :: lstat
 character(len=500) :: dimname
 type(ETSF_io_low_error) :: Error_data

! *********************************************************************

! Define dimensions
! Use *private* names for dimensions to avoid possible name collisions.
! if varname is "foo", we use "__foo_dim1__", __foo_dim2__" for name of the dimensions
 call etsf_io_low_set_define_mode(ncid, lstat, Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

 do ii=1,size(shape(farray))
   dimval = size(farray, dim=ii) * 2
   write(dimname,"(3a,i0,a)")"__",trim(varname),"_dim",ii,"__"

   call etsf_io_low_write_dim(ncid,dimname,dimval,lstat,Error_data=Error_data)  
   ETSF_CHECK_ERROR(lstat,Error_data)
 end do

! Define the variable.
 vartype = etsf_io_low_double
 call etsf_io_low_def_var(ncid,varname,vartype,lstat,Error_data=Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

! Write data
 call etsf_io_low_set_write_mode(ncid,lstat,Error_data=Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

 call etsf_io_low_write_var(ncid,varname,c2r(farray),lstat,Error_data=Error_data)
 ETSF_CHECK_ERROR(lstat,Error_data)

#else 
 MSG_ERROR("ETSF-IO support is not activated. ")
#endif

end subroutine farr_complex_dpc1

